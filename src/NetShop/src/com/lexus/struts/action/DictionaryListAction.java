/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.lexus.struts.action;

import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;

import com.lexus.bean.Dictionary;
import com.lexus.bean.DictionaryLib;
import com.lexus.bean.User;
import com.lexus.service.IDictionaryLibService;
import com.lexus.service.IDictionaryService;
import com.lexus.util.AppContext;
import com.lexus.util.Constans;
import com.lexus.util.XMLOperate;

/**
 * MyEclipse Struts Creation date: 05-06-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/manage/dictionaryList" name="dictionaryListForm"
 *                input="/form/dictionaryList.jsp" parameter="act"
 *                scope="request"
 */
public class DictionaryListAction extends BaseDispatchAction {

	public ActionForward show(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//设置输出信息的格式及字符集        
        response.setContentType("text/xml; charset=UTF-8");
        response.setHeader("Cache-Control", "no-cache");
		if (log.isInfoEnabled()) {
			log.info("执行show操作");
		}
		//User user = this.getUserSession(request);
		//if (user == null) {
		//	return mapping.findForward(Constans.PAGE_LOGIN);
		//} else { // 返回字典列表
			if (log.isInfoEnabled()) {
				log.info("返回字典列表");
			}
			List list = this.getDictionaryService().findByAll();
//			request.getSession().setAttribute(Constans.LIST_OF_DICTIONARY, list);
//			request.setAttribute(Constans.LIST_OF_DICTIONARY, list);
			Document doc=XMLOperate.dictionariesXMLDocument(list);
			XMLOutputter xout=new XMLOutputter();
			xout.output(doc, response.getWriter());
			response.getWriter().close();
			return null;
//			return mapping.findForward(Constans.PAGE_DICTIONARY_LIST);
		//}
	}
	
	/**
	 * 用以替代show，功能同show
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//设置输出信息的格式及字符集        
        response.setContentType("text/xml; charset=UTF-8");
        response.setHeader("Cache-Control", "no-cache");
		if (log.isInfoEnabled()) {
			log.info("执行show2操作");
		}
//		User user = this.getUserSession(request);
//		if (user == null) {
//			return mapping.findForward(Constans.PAGE_LOGIN);
//		} else { // 返回字典列表
			if (log.isInfoEnabled()) {
				log.info("返回字典列表2");
			}
			List list = this.getDictionaryService().findByAll();
//			request.getSession().setAttribute(Constans.LIST_OF_DICTIONARY, list);
//			request.setAttribute(Constans.LIST_OF_DICTIONARY, list);
			Document doc=XMLOperate.dictionariesXMLDocument2(list);
			XMLOutputter xout=new XMLOutputter();
			xout.output(doc, response.getWriter());
			response.getWriter().close();
			return null;
//			return mapping.findForward(Constans.PAGE_DICTIONARY_LIST);
//		}
	}
	/**
	 * 用以替代servlet,解析show的下一层，功能同servlet
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show3(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
    	//设置接收信息的字符集
    	request.setCharacterEncoding("UTF-8");
		//接收浏览器端提交的信息
		int dictionaryId = Integer.parseInt(request.getParameter("dictionaryId"));		
		int parentId = Integer.parseInt(request.getParameter("parentId"));
//		String act = request.getParameter("act");
		//设置输出信息的格式及字符集        
        response.setContentType("text/xml; charset=UTF-8");
        response.setHeader("Cache-Control", "no-cache");

    	List list=this.getDictionaryLibService().findByParentIdAndDictionaryId(parentId, dictionaryId);
    	if(log.isInfoEnabled())
    	{
    		if(list.isEmpty() || list==null)
    		{
    			log.info("list为空");
    		}
    		else
    		{
    			log.info("list不为空");
    			log.info("共有"+String.valueOf(list.size()+"条记录"));
    		}
    	}

    	//创建XML
    	Element root=new Element("tree");
    	Document doc=new Document(root);
    	if(list!=null)
    	{
    		for(int i=0;i<list.size();i++)
    		{
    			DictionaryLib temp=(DictionaryLib)list.get(i);
    			Element tree=new Element("tree");
    			tree.setAttribute(new Attribute("text",temp.getName()));
    			tree.setAttribute(new Attribute("id",temp.getPkDictionaryLibId().toString()+","+String.valueOf(dictionaryId)));
    			tree.setAttribute(new Attribute("onaction","insertValue(this)"));
    			tree.setAttribute(new Attribute("src","dictionaryList.do?act=show3&parentId="+temp.getPkDictionaryLibId().toString()+"&dictionaryId="+String.valueOf(dictionaryId)));
    			doc.getRootElement().addContent(tree);
    		}
    	}
    	
		XMLOutputter xout=new XMLOutputter();
		xout.output(doc, response.getWriter());
		response.getWriter().close();
		return null;
	}
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (log.isInfoEnabled()) {
			log.info("执行delete操作");
		}
		ActionMessages infos=new ActionMessages();
		User user=this.getUserSession(request);
		ActionForward af=null;
		if(null==user)
		{
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.ui.manage.dictionarylist.param.invalid"));
			af=mapping.findForward(Constans.PAGE_LOGIN);
		}
		else
		{
			int id=Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
			Dictionary dictionary=this.getDictionaryService().findById(id);
			if(dictionary!=null)
			{//存在该字典
				this.getDictionaryService().delete(dictionary);
				infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("message.ui.manage.dictionarylist.success"));
				List list = this.getDictionaryService().findByAll();
				request.setAttribute(Constans.LIST_OF_DICTIONARY, list);
			}
			else
			{
				infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.ui.manage.dictionarylist.param.invalid"));
			}
			af=mapping.findForward(Constans.PAGE_DICTIONARY_LIST);
		}
		if(!infos.isEmpty())
		{
			this.saveErrors(request, infos);
		}
		return af;
	}

}