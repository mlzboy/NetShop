/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.lexus.struts.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.lexus.bean.User;
import com.lexus.bean.UserDetail;
import com.lexus.util.Constans;

/**
 * MyEclipse Struts Creation date: 04-30-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/manage/userList" name="userListForm"
 *                input="/manage/userList.jsp" scope="request" validate="true"
 */
/**
 * @author Lexus
 * 
 */
public class UserListAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// method stub
		String act = request.getParameter(Constans.PARAM_OF_ACTION);
		if (null == act || "".equals(act)) {
			return doList(mapping, form, request, response);
		} else if (Constans.ACTION_OF_DELETE.equals(act)) {
			return doDelete(mapping, form, request, response);
		} else if (Constans.ACTION_OF_LOCKED.equals(act)) {
			return doLock(mapping, form, request, response);
		} else if (Constans.ACTION_OF_UNLOCK.equals(act)) {
			return doUnlock(mapping, form, request, response);
		} else {
			return super.execute(mapping, form, request, response);
		}
	}

	private ActionForward doList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		User user = this.getUserSession(request);
		if (user == null) {
			return mapping.findForward(Constans.PAGE_LOGIN);
		} else { // 取得用户列表
			List list = this.getUserService().findByAll();
			request.getSession().setAttribute(Constans.LIST_OF_USER, list);
			return mapping.findForward(Constans.PAGE_USERLIST);
		}
	}

	private ActionForward doDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int id = Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		User user = new User();
		UserDetail userDetail = new UserDetail();
		user.setPkUserId(id);
		userDetail.setPkFkUserId(id);
		user.setUserDetails(userDetail);
		this.getUserService().delete(user);
		if (log.isInfoEnabled()) {
			log.info("删除用户操作成功");
		}
		// 以下两句未起作用，需更好的方式处理
		ActionMessages info = new ActionMessages();
		info.add("info", new ActionMessage(
				"message.struts.action.userlist.delete"));
		return this.doList(mapping, form, request, response);
	}

	private ActionForward doLock(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int id = Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		User user = this.getUserService().findById(id);
		user.setStatus(Constans.STATUS_OF_LOCKED);
		this.getUserService().saveOrUpdate(user);
		if (log.isInfoEnabled()) {
			log.info("锁定用户操作成功");
		}
		return this.doList(mapping, form, request, response);
	}

	private ActionForward doUnlock(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int id = Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		User user = this.getUserService().findById(id);
		user.setStatus(Constans.STATUS_OF_NORMAL);
		this.getUserService().saveOrUpdate(user);
		if (log.isInfoEnabled()) {
			log.info("锁定用户操作成功");
		}
		return this.doList(mapping, form, request, response);
	}
}