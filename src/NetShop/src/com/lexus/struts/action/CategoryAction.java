/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.lexus.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.validator.DynaValidatorActionForm;

import com.lexus.bean.Dictionary;
import com.lexus.bean.DictionaryLib;
import com.lexus.util.Constans;
import com.lexus.util.XMLOperate;

/** 
 * MyEclipse Struts
 * Creation date: 05-15-2007
 * 
 * XDoclet definition:
 * @struts.action path="/manage/categoryAdd" name="categoryForm" input="/manage/categoryAdd.jsp" scope="request" validate="true"
 */
public class CategoryAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 * @throws Exception 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception, IOException {
		String act=request.getParameter(Constans.PARAM_OF_ACTION)==null?"":request.getParameter(Constans.PARAM_OF_ACTION).trim().toLowerCase();
		if(Constans.ACTION_OF_BUILDDICTIONARIES.equals(act))
		{
			return this.doBuildDictionaries(mapping, form, request, response);
		}
		else
		{
			return this.doCategoryAdd(mapping, form, request, response);
		}

	}
	private ActionForward doBuildDictionaries(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws FileNotFoundException, IOException
	{
		if(log.isInfoEnabled())
		{
			log.info("执行buildDictionaries操作");
		}
		List list=this.getDictionaryService().findByAll();
		request.setAttribute(Constans.LIST_OF_DICTIONARY, list);
		XMLOperate.createDictionariesXMLFile("manage/dict.xml", list, request);
		return mapping.findForward(Constans.PAGE_BUILD_DICTIONARIES);
	}
	private ActionForward doCategoryAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		ActionMessages infos=new ActionMessages();
		DynaValidatorActionForm categoryForm = (DynaValidatorActionForm) form;// TODO Auto-generated method stub
		String parentCategoryName=(String)categoryForm.get("parentCategoryName");
		int parentId=Integer.valueOf((String)categoryForm.get("parentCategoryId"));
		int dictionaryId=Integer.valueOf((String)categoryForm.getString("dictionaryId"));
		String status=(String)categoryForm.get("categoryStatus");
		String categoryName=(String)categoryForm.get("categoryName");
		String description=(String)categoryForm.get("categoryDescription");
		if(log.isInfoEnabled())
		{
			log.info("parentCategoryName="+parentCategoryName);
			log.info("parentId="+parentId);
			log.info("dictionaryId="+dictionaryId);
			log.info("status="+status);
			log.info("categoryName="+categoryName);
			log.info("description="+description);
		}
		//检测parentId的有效性
		DictionaryLib parentDictionaryLib=this.getDictionaryLibService().findById(parentId);
		//检测dictionaryId的有效性
		Dictionary dictionary=this.getDictionaryService().findById(dictionaryId);
		DictionaryLib newDictionaryLib=new DictionaryLib();
		if(parentDictionaryLib!=null)
		{
			//入库
			if(log.isInfoEnabled())
			{
				log.info("当parentId!=0时进行入库操作");
			}
			
			//newDictionaryLib.setDepth(Short.parseShort(String.valueOf(parentDictionaryLib.getDepth()+1)));
			
			if(dictionary!=null)
			{
				if(log.isInfoEnabled())
				{
					log.info("存在此dictionary，给newDictionaryLib赋值");
				}
				newDictionaryLib.setDictionary(dictionary);	
				
				//			newDictionaryLib.getDictionary().setPkDictionaryId(dictionaryId);
				newDictionaryLib.setDictionaryLib(parentDictionaryLib);
				newDictionaryLib.setStatus(status);
				newDictionaryLib.setDescription(description);
				newDictionaryLib.setName(categoryName);
				newDictionaryLib.setDepth((short)(parentDictionaryLib.getDepth()+Short.parseShort("1")));
				newDictionaryLib.setSequence(parentDictionaryLib.getDictionaryLibs().size()+1);
				Date d=new Date();
				newDictionaryLib.setCheckinTime(d);
				newDictionaryLib.setUpdateTime(d);
				newDictionaryLib.setVersion(Short.parseShort("1"));
//				HashSet<DictionaryLib> hs=new HashSet<DictionaryLib>();
//				hs.add(newDictionaryLib);
//				parentDictionaryLib.setDictionaryLibs(hs);
				this.getDictionaryLibService().save(newDictionaryLib);
				infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("message.struts.action.category.success"));
			}
			else
			{
				if(log.isInfoEnabled())
				{
					log.info("非法dictionary参数");
				}
				infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.category.invalid"));
			}
		}
		else if(parentId==0)
		{
			if(dictionary!=null)
			{
				if(log.isInfoEnabled())
				{
					log.info("当parentId=0时，进行入库操作");
				}
				newDictionaryLib.setDictionary(dictionary);
				newDictionaryLib.setDictionaryLib(null);
				newDictionaryLib.setStatus(status);
				newDictionaryLib.setDescription(description);
				newDictionaryLib.setName(categoryName);
				newDictionaryLib.setDepth(Short.parseShort("1"));
				newDictionaryLib.setSequence(this.getDictionaryLibService().findByDictionaryIdAndParentId(dictionaryId, parentId)+1);
				Date d=new Date();
				newDictionaryLib.setCheckinTime(d);
				newDictionaryLib.setUpdateTime(d);
				newDictionaryLib.setVersion(Short.parseShort("1"));
				this.getDictionaryLibService().save(newDictionaryLib);
				infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("message.struts.action.category.success"));
				
			}
		}
		else
		{
			if(log.isInfoEnabled())
			{
				log.info("非法参数");
			}
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.category.info"));
		}
		if(!infos.isEmpty())
		{
			this.saveErrors(request, infos);
		}
		return mapping.getInputForward();
	}
}