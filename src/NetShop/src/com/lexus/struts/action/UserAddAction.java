/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.lexus.struts.action;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.lexus.bean.User;
import com.lexus.bean.UserDetail;
import com.lexus.struts.form.UserAddForm;
import com.lexus.util.*;
/**
 * MyEclipse Struts Creation date: 04-27-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/userAdd" name="userAddForm" input="/form/userAdd.jsp"
 *                scope="request" validate="true"
 */
public class UserAddAction extends BaseAction {
	/**
	 * Logger for this class
	 */
	// private static final Log log = LogFactory.getLog(UserAddAction.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserAddForm userAddForm = (UserAddForm) form;// TODO Auto-generated
		// method stub
		ActionMessages errors = new ActionMessages();
//		String URL=mapping.getInput();
		String username = userAddForm.getUsername();
		String password = userAddForm.getPassword();
		String password2 = userAddForm.getPassword2();
		String ip = request.getRemoteAddr();
		ActionForward af=mapping.getInputForward();
		if (log.isInfoEnabled()) {
			log.info("======" + userAddForm.getPassword());
			log.info("======" + userAddForm.getPassword2());
		}
		//验证用户是否登录
		User user=this.getUserSession(request);
		if(user==null)
		{
			errors.add("info",new ActionMessage("error.struts.action.useradd.dislogin"));
		}
		else
		{
			// 先判断两次密码输入的一致性,再检查是否存在用户名,避免多余的数据库操作
			if (password.equals(password2)) {
				// 两次密码输入一致
				if (log.isInfoEnabled()) {
					log.info("两次密码输入一致");
				}
				// 判断是否已经存在此用户名
				List list = this.getUserService().findByUsername(username);
				if (list.size() > 0) {
					if (log.isInfoEnabled()) {
						log.info("已经存在此用户名");
					}
					// errors.add(ActionMessages.GLOBAL_MESSAGE, new
					// ActionMessage("error.struts.action.useradd.exist"));//
					errors.add("username", new ActionMessage(
							"error.struts.action.useradd.exist"));
//					if (!errors.isEmpty()) {
//						this.saveErrors(request, errors);
//					}
//					return mapping.getInputForward();
				} else {
					if (log.isInfoEnabled()) {
						log.info("用户名不存在");
						log.info("入库操作");
					}

					// 入库操作
					user = new User();
					user.setUsername(username);
					user.setPassword(password);
					user.setLastLoginIp(ip);
					// 设置默认值
					Date d = new Date();
					user.setCheckinTime(d);
					user.setUpdateTime(d);
					user.setVersion(Short.parseShort("1"));
					user.setStatus(Constans.STATUS_OF_NORMAL);

					UserDetail userDetail = new UserDetail();
					user.setUserDetails(userDetail);
					userDetail.setUser(user);
					this.getUserService().save(user);

					if (log.isInfoEnabled()) {
						log.info("入库操作结束");
						log.info("跳转");
					}
					errors.add("info",new ActionMessage("message.struts.action.useradd.success"));
//					URL=Constans.PAGE_SUCCESS;
				}
			} else {
				if (log.isInfoEnabled()) {
					log.info("两次密码输入不一致");
				}
				errors.add("password", new ActionMessage(
						"error.struts.action.useradd.differ"));
			}
		}

		if (!errors.isEmpty()) {
			this.saveErrors(request, errors);
		}
//		return new ActionForward(mapping.getInput());
//		return mapping.getInputForward();
//		return mapping.findForward(URL);
		return af;
	}
}