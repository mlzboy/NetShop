/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.lexus.struts.action;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.lexus.bean.Attachment;
import com.lexus.bean.Product;
import com.lexus.struts.form.ProductListForm;
import com.lexus.util.Constans;
import com.lexus.util.FileOperate;
import com.lexus.util.Page;
import com.lexus.util.PageResult;

/**
 * MyEclipse Struts Creation date: 05-04-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/manage/productList" name="productListForm"
 *                input="/manage/productList.jsp" scope="request"
 *                validate="true"
 */
public class ProductListAction extends BaseAction {
	/**
	 * Logger for this class
	 */
	private static final Log log = LogFactory.getLog(ProductListAction.class);

	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws NoSuchMethodException 
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
		ProductListForm productListForm = (ProductListForm) form;// TODO
																	// Auto-generated
																	// method
																	// stub
		String act = request.getParameter(Constans.PARAM_OF_ACTION) == null ? ""
				: request.getParameter(Constans.PARAM_OF_ACTION).trim();

		if (act.equalsIgnoreCase(Constans.ACTION_OF_LIST)) {
			if (log.isInfoEnabled()) {
				log.info("执行doList方法");
			}
			return this.doList(mapping, form, request, response);
		} else if (act.equalsIgnoreCase(Constans.ACTION_OF_SEARCH)) {
			if (log.isInfoEnabled()) {
				log.info("执行doSearch方法");
			}
			return this.doSearch(mapping, form, request, response);
		}
		else if(act.equalsIgnoreCase(Constans.ACTION_OF_MODIFY))
		{
			return this.doModify(mapping, form, request, response);
		}
		else if(act.equalsIgnoreCase(Constans.ACTION_OF_DELETE))
		{
			return this.doDelete(mapping, form, request, response);
		}
		else if(act.equalsIgnoreCase(Constans.Action_OF_MODIFY_SAVE))
		{
			return this.doModifySave(mapping, form, request, response);
		}
		return null;
	}

	private ActionForward doModifySave(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		ActionMessages infos=new ActionMessages();
		if(log.isInfoEnabled())
		{
			log.info("执行doModifySave方法");
		}
		int id=request.getParameter(Constans.PARAM_OF_ID)==null?0:Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		Product product=this.getProductService().findById(id);
		if(product!=null)
		{
			//取得表单参数
			
			this.getProductService().saveOrUpdate(product);
			//删除产品成功
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.productlist.modify.success"));
		}
		else
		{
			//非法id参数
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.productlist.invalid"));
		}
		//返回产品列表页
		return this.doList(mapping, form, request, response);
	}

	private ActionForward doDelete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		ActionMessages infos=new ActionMessages();
		if(log.isInfoEnabled())
		{
			log.info("执行doDelete方法");
		}
		int id=request.getParameter(Constans.PARAM_OF_ID)==null?0:Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		Product product=this.getProductService().findById(id);
		if(product!=null)
		{
			//删除产品相关附件
			List list=product.getProductAttachments();
			if(list!=null)
			{
			for(int i=0;i<list.size();i++)
			{
				//删除服务器上文件
				if(log.isInfoEnabled())
				{
					log.info("删除服务器上文件");
				}
				FileOperate.delete(request,((Attachment)list.get(i)).getAttachmentUrl());
				//删除Attachment表中的相关记录
				if(log.isInfoEnabled())
				{
					log.info("删除Attachment表中的相关记录");
				}
				this.getAttachmentService().delete((Attachment)list.get(i));
//				this.getAttachmentService().delete(this.getAttachmentService().findById(((Attachment)list.get(i)).getPkAttachmentId()));
			}
			}
			if(log.isInfoEnabled())
			{
				log.info("删除产品表及明细表相关记录");
			}
			this.getProductService().delete(product);
			//删除产品成功
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.productlist.delete.success"));
		}
		else
		{
			//非法id参数
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.productlist.invalid"));
		}
		//返回产品列表页
		return this.doList(mapping, form, request, response);
	}

	private ActionForward doModify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		if(log.isInfoEnabled())
		{
			log.info("执行doModify方法");
		}
		ActionForward af=null;
		ActionMessages infos=new ActionMessages();
		int id=request.getParameter(Constans.PARAM_OF_ID)==null?0:Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		Product product=this.getProductService().findById(id);
		if(product!=null)
		{
			request.setAttribute(Constans.ENTITY_OF_PRODUCT,product);
			//infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.productlist.modify.success"));
			//前往产品编辑页
			af=mapping.findForward(Constans.PAGE_PRODUCT_EDIT);
		}
		else
		{
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.productlist.invalid"));
			//返回产品列表页
			af=mapping.getInputForward();
		}
		return af;
	}

	/**
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return 返回分页显示的产品列表数据
	 */
	private ActionForward doList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int currentPage=request.getParameter(Constans.PARAM_OF_CURRENTPAGE)==null?1:Integer.parseInt(request.getParameter(Constans.PARAM_OF_CURRENTPAGE));
		Page page=new Page(10,currentPage);
		//获得产品分页列表数据并返回
		PageResult pageResult=this.getProductService().findByPagination(page);
		if(log.isInfoEnabled())
		{
			log.info("共有几条记录="+pageResult.getPage().getRecordCount());
			log.info("每页显示几条="+pageResult.getPage().getPageSize());
			log.info("共有几页="+pageResult.getPage().getPageCount());
			log.info("当前在第几页="+pageResult.getPage().getCurrentPage());
		}
		request.setAttribute(Constans.LIST_OF_PRODUCT, pageResult.getList());
		request.setAttribute(Constans.ENTITY_OF_PAGE, pageResult.getPage());
		return mapping.findForward(Constans.PAGE_PRODUCT_LIST);
	}

	private ActionForward doSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
		if(log.isInfoEnabled())
		{
			log.info("执行doSearch方法");
		}
		//获取参数
		String fieldName=(String)PropertyUtils.getProperty(form,"fieldName");
		String keyword=(String)PropertyUtils.getProperty(form, "keyword");
		if(log.isInfoEnabled())
		{
			log.info("fieldName="+fieldName);
			log.info("keyword="+keyword);
		}
		Page page=new Page(5);
		PageResult pageResult=this.getProductService().doSearch(page,fieldName,keyword);
		if(log.isInfoEnabled())
		{
			log.info("共有几条记录="+pageResult.getPage().getRecordCount());
			log.info("每页显示几条="+pageResult.getPage().getPageSize());
			log.info("共有几页="+pageResult.getPage().getPageCount());
			log.info("当前在第几页="+pageResult.getPage().getCurrentPage());
		}
		request.setAttribute(Constans.LIST_OF_PRODUCT,pageResult.getList());
		request.setAttribute(Constans.ENTITY_OF_PAGE,pageResult.getPage());
		return mapping.findForward(Constans.PAGE_PRODUCT_SEARCH_RESULT);
	}
}