/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.lexus.struts.action;

import java.io.UnsupportedEncodingException;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.validator.DynaValidatorForm;

import com.lexus.bean.Dictionary;
import com.lexus.bean.User;
import com.lexus.util.Constans;

/**
 * MyEclipse Struts Creation date: 05-05-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/manage/dictionary" name="dictionaryForm"
 *                input="/manage/dictionaryAdd.jsp" scope="request"
 *                validate="true"
 */
public class DictionaryAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String act = request.getParameter(Constans.PARAM_OF_ACTION).trim()
				.toLowerCase();
		if (Constans.ACTION_OF_ADD.equals(act)) {
			if (log.isInfoEnabled()) {
				log.info("调用doAdd()");
			}
			return this.doAdd(mapping, form, request, response);
		} else {
			if (log.isInfoEnabled()) {
				log.info("调用其它方法");
			}
			return super.execute(mapping, form, request, response);
		}
	}

	private ActionForward doAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws UnsupportedEncodingException {
		ActionMessages infos = new ActionMessages();
		User user = this.getUserSession(request);
		ActionForward af = null;
		if (user == null) {
			infos.add(Constans.MESSAGE_OF_INFO, new ActionMessage(""));
			af = mapping.findForward(Constans.PAGE_LOGIN);
		} else {
			DynaValidatorForm dictionaryForm = (DynaValidatorForm) form;
			request.setCharacterEncoding("UTF-8");
			response.setCharacterEncoding("UTF-8");

			String dictionaryName = (String) dictionaryForm
					.get("dictionaryName");
			boolean isMultinest = Boolean.parseBoolean((String) dictionaryForm
					.get("isMultinest"));
			if (log.isInfoEnabled()) {
				log.info("dictionaryName=" + dictionaryName);
				log.info("isMultinest=" + String.valueOf(isMultinest));
				// log.info("test="+ Short.parseShort((String)
				// dictionaryForm.get("isMultinest")));
			}
			Dictionary dictionary = new Dictionary();
			dictionary.setDictionaryName(dictionaryName);
			if (isMultinest) {
				dictionary.setIsMultinest((short) 1);
			} else {
				dictionary.setIsMultinest((short) 0);
			}
			Date d = new Date();
			dictionary.setCheckinTime(d);
			dictionary.setUpdateTime(d);
			dictionary.setVersion(Short.parseShort("1"));
			dictionary.setStatus(Constans.STATUS_OF_NORMAL);
			this.getDictionaryService().save(dictionary);
			if (log.isInfoEnabled()) {
				log.info("添加字典操作成功");
			}
			infos.add(Constans.MESSAGE_OF_INFO, new ActionMessage(
					"message.struts.action.dictionaryadd.success"));
			af = mapping.getInputForward();
			// return mapping.findForward(Constans.PAGE_DICTIONARY_ADD);
		}
		if (!infos.isAccessed()) {
			this.saveErrors(request, infos);
		}
		return af;

	}

}