/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.lexus.struts.action;

import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.validator.DynaValidatorForm;

import com.lexus.bean.Attachment;
import com.lexus.bean.Dictionary;
import com.lexus.bean.DictionaryLib;
import com.lexus.bean.Product;
import com.lexus.util.Constans;
import com.lexus.util.FileOperate;

/**
 * MyEclipse Struts Creation date: 05-25-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/manage/dictionaryDetail" name="dictionaryDetailForm"
 *                input="/manage/dictionaryDetail.jsp" scope="request"
 *                validate="true"
 */
public class DictionaryDetailAction extends BaseAction {
	/**
	 * Logger for this class
	 */
	private static final Log log = LogFactory.getLog(DictionaryDetailAction.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		log.info("执行execute方法");
		String act = request.getParameter(Constans.PARAM_OF_ACTION);
		if (act.equalsIgnoreCase(Constans.ACTION_OF_MODIFY)) {
			return this.doModify(mapping, form, request, response);
		}
		else if(act.equalsIgnoreCase(Constans.ACTION_OF_DELETE))
		{
			return this.doDelete(mapping, form, request, response);
		}
		else{
			return this.doShow(mapping, form, request, response);
		}

	}
	private ActionForward doDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		if(log.isInfoEnabled())
		{
			log.info("执行doDelete方法");
		}
		ActionMessages infos=new ActionMessages();
		int id=Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		Dictionary dictionary=this.getDictionaryService().findById(id);
		if(dictionary!=null)
		{
			//删除字典将级联删除字典库中相关的记录
			//同时将删除相关的产品表及产品明细表还有附件表中相关的记录,该功能沿未实现
			List temp=this.getDictionaryLibService().findByProperty("dictionary",dictionary);
			log.info("该字典下共有个" +temp.size()+"　分类");
			DictionaryLib[] arrDictionaryLibs=(DictionaryLib[])temp.toArray(new DictionaryLib[temp.size()]);
			
//			遍历产品主表
			if(log.isInfoEnabled())
			{
				log.info("遍历产品主表开始");
			}
			List aList=this.getProductService().findAll();
			int aSize=aList.size();
			log.info("产品表共有"+aSize+"个产品");
			List bList=null;
			int bSize=0;
			Product product;
			for(int i=0;i<aSize;i++)
			{
				log.info("当前在产品表第"+i+"个产品上进行操作");
				//取得该产品
				product=(Product)aList.get(i);
				//取得该产品所属的所有分类列表
				bList=product.getProductCategories();
				//取得产品所属分类的个数
				bSize=bList.size();
				log.info("该产品上共有" +bSize+"个分类");
				for(int j=bSize;j>0;j--)
				{
					log.info("当前在该产品分类的第"+j+"个分类上进行操作");
					if(org.apache.commons.lang.ArrayUtils.contains(arrDictionaryLibs, (DictionaryLib)bList.get(j-1)))
					{
						log.info("当前该产品分类是欲删除分类中的一个");
						if(bSize>1)
						{
							log.info("由于该产品有多个分类，所以删除欲删除的分类并对该产品信息进行更新");
							//更新该产品信息
							bList.remove(j-1);
							product.setProductCategories(bList);
							this.getProductService().saveOrUpdate(product);
						}
						else
						{
							log.info("当前产品仅存在一个分类，所以对此产品进行删除操作，包括其附表、明细、主表，文件");
							//删除该产品主表，明细表，附件表信息，并删除附件
							
//							删除产品相关附件
							List list=product.getProductAttachments();
							if(list!=null)
							{
							for(int k=0;k<list.size();k++)
							{
								//删除服务器上文件
								if(log.isInfoEnabled())
								{
									log.info("删除服务器上文件");
								}
								FileOperate.delete(request,((Attachment)list.get(k)).getAttachmentUrl());
								//删除Attachment表中的相关记录
								if(log.isInfoEnabled())
								{
									log.info("删除Attachment表中的相关记录");
								}
								this.getAttachmentService().delete((Attachment)list.get(k));
//								this.getAttachmentService().delete(this.getAttachmentService().findById(((Attachment)list.get(i)).getPkAttachmentId()));
							}
							}
							if(log.isInfoEnabled())
							{
								log.info("删除产品表及明细表相关记录");
							}
							this.getProductService().delete(product);
							
						}
					}
				}
			}
			
			
			this.getDictionaryService().delete(dictionary);
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("message.struts.action.dictionarydetail.delete.success"));
		}
		else
		{
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.dictionarydetail.invalid"));
		}
		if(!infos.isEmpty())
		{
			this.saveErrors(request, infos);
		}
		return mapping.findForward(Constans.PAGE_SHOW_INFO);
	}
	private ActionForward doModify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setHeader("Pragma","No-cache"); 
		response.setHeader("Cache-Control","no-cache"); 
		response.setDateHeader("Expires", 0); 
		ActionMessages infos=new ActionMessages();
		if(log.isInfoEnabled())
		{
			log.info("执行modify操作");
		}
		//获取参数
		DynaValidatorForm dictionaryDetailForm = (DynaValidatorForm) form;
		String dictionaryName=dictionaryDetailForm.getString("dictionaryName");
		short isMultinest;
		isMultinest=dictionaryDetailForm.getString("isMultinest").equalsIgnoreCase("on")?Short.parseShort("1"):Short.parseShort("0");
		String dictionaryStatus=dictionaryDetailForm.getString("dictionaryStatus");
		int id=Integer.parseInt(dictionaryDetailForm.getString("id"));
		if(log.isInfoEnabled())
		{
			log.info("dictionaryName="+dictionaryName);
			log.info("isMultinest="+String.valueOf(isMultinest));
			log.info("dictionaryStatus="+dictionaryStatus);
			log.info("id="+String.valueOf(id));
		}
		//验证参数的正确性
		Dictionary dictionary=this.getDictionaryService().findById(id);
		if(dictionary!=null)
		{
			//进行修改字典操作
			if(log.isInfoEnabled())
			{
				log.info("进行修改字典入库操作");
			}
			dictionary.setDictionaryName(dictionaryName);
			dictionary.setStatus(dictionaryStatus);
			dictionary.setIsMultinest(isMultinest);
			dictionary.setUpdateTime(new Date());
			this.getDictionaryService().saveOrUpdate(dictionary);
			if(log.isInfoEnabled())
			{
				log.info("入库操作成功");
			}
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("message.struts.action.dictionarydetail.success"));
		}
		else
		{
			if(log.isInfoEnabled())
			{
				log.info("非法参数");
			}
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.dictionarydetail.invalid"));
		}
		if(!infos.isEmpty())
		{
			this.saveErrors(request, infos);
		}
		return mapping.findForward(Constans.PAGE_SHOW_INFO);
	}

	private ActionForward doShow(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int id = Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		ActionMessages infos = new ActionMessages();
		if (log.isInfoEnabled()) {
			log.info("执行dictionaryDetail的execute方法");
			log.info("id=" + String.valueOf(id));
		}
		Dictionary dictionary = this.getDictionaryService().findById(id);
		if (dictionary != null) {
			request.setAttribute(Constans.ENTITY_OF_DICTIONARY, dictionary);
		} else {
			infos.add(Constans.MESSAGE_OF_INFO, new ActionMessage(
					"error.struts.action.dictionarydetail.invalid"));
		}
		if (!infos.isEmpty()) {
			this.saveErrors(request, infos);
		}
		return mapping.findForward(Constans.PAGE_DICTIONARY_DETAIL);
	}
}