/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.lexus.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.validator.DynaValidatorForm;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.output.XMLOutputter;

import com.lexus.bean.Attachment;
import com.lexus.bean.DictionaryLib;
import com.lexus.bean.Product;
import com.lexus.util.Constans;
import com.lexus.util.FileOperate;

/** 
 * MyEclipse Struts
 * Creation date: 05-25-2007
 * 
 * XDoclet definition:
 * @struts.action path="/manage/categoryDetail" name="categoryDetailForm" input="/manage/categoryDetail.jsp" scope="request" validate="true"
 */
public class CategoryDetailAction extends BaseAction {
	/**
	 * Logger for this class
	 */
	private static final Log log = LogFactory.getLog(CategoryDetailAction.class);

	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		if (log.isInfoEnabled()) {
			log.info("执行execute");
		}
		String act=request.getParameter(Constans.PARAM_OF_ACTION)==null?"":request.getParameter(Constans.PARAM_OF_ACTION);
		if(Constans.ACTION_OF_BUILDDICTIONARIES.equalsIgnoreCase(act))
		{
			return this.buildDictionaries(mapping, form, request, response);
		}
		else if(Constans.ACTION_OF_SHOW.equalsIgnoreCase(act))
		{
			return this.doShow(mapping, form, request, response);
		}
		else if(Constans.ACTION_OF_DELETE.equalsIgnoreCase(act))
		{
			return this.doDelete(mapping, form, request, response);
		}
		else if(Constans.ACTION_OF_MODIFY.equalsIgnoreCase(act))
		{
			return this.doModify(mapping, form, request, response);
		}
		else
		{
			return null;		
		}

	}
	private ActionForward doModify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		DynaValidatorForm categoryDetailForm = (DynaValidatorForm) form;
		ActionMessages infos=new ActionMessages();
		if(log.isInfoEnabled())
		{
			log.info("执行doModify方法");
		}
		int id=request.getParameter(Constans.PARAM_OF_ID)==null?0:Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		String categoryName=categoryDetailForm.getString("categoryName");
		String status=categoryDetailForm.getString("status");
		String description=categoryDetailForm.getString("description");
		DictionaryLib dictionaryLib=this.getDictionaryLibService().findById(id);
		if(dictionaryLib!=null)
		{
			dictionaryLib.setName(categoryName);
			dictionaryLib.setStatus(status);
			dictionaryLib.setDescription(description);
			dictionaryLib.setUpdateTime(new Date());
			dictionaryLib.setVersion(Short.parseShort(String.valueOf((int)dictionaryLib.getVersion()+1)));
			this.getDictionaryLibService().saveOrUpdate(dictionaryLib);
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("message.struts.action.categorydetail.modify.success"));
		}
		else
		{
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.categorydetail.invalid"));
		}
		if(!infos.isEmpty())
		{
			this.saveErrors(request, infos);
		}
		return mapping.findForward(Constans.PAGE_SHOW_INFO);
	}
	private ActionForward doDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		ActionMessages infos=new ActionMessages();
		if(log.isInfoEnabled())
		{
			log.info("执行doDelete方法");
		}
		int id=request.getParameter(Constans.PARAM_OF_ID)==null?0:Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		DictionaryLib dictionaryLib=this.getDictionaryLibService().findById(id);
		if(dictionaryLib!=null)
		{
			if(log.isInfoEnabled())
			{
				log.info("参数正确");
			}
			//深度遍历获取该分类及其下所有子类
			ArrayList<DictionaryLib> al=new ArrayList<DictionaryLib>();
			//添加节点自身
			al.add(dictionaryLib);
			//创建堆栈
			Stack<Integer> myStack=new Stack<Integer>();
			//压入堆栈
			this.doPush(myStack, dictionaryLib);
			while(!myStack.empty())
			{
				int i=myStack.pop();
				al.add(this.getDictionaryLibService().findById(i));
				this.doPush(myStack,this.getDictionaryLibService().findById(i));
			}
			//取得该分类及其所有子类的ID以逗号分隔的字符串
			//String strIDs=org.apache.commons.lang.StringUtils.join(al.toArray(),',');
			DictionaryLib[] arrDictionaryLibs=(DictionaryLib[])al.toArray(new DictionaryLib[al.size()]);
//			if(log.isInfoEnabled())
//			{
//				log.info("执行删除属于该分类下的产品及明细表中的记录");
//			}
//			this.getProductService().batchDelete(arrDictionaryLibs);
			
			//遍历产品主表
			if(log.isInfoEnabled())
			{
				log.info("遍历产品主表开始");
			}
			List aList=this.getProductService().findAll();
			int aSize=aList.size();
			log.info("产品表共有"+aSize+"个产品");
			List bList=null;
			int bSize=0;
			Product product;
			for(int i=0;i<aSize;i++)
			{
				log.info("当前在产品表第"+i+"个产品上进行操作");
				//取得该产品
				product=(Product)aList.get(i);
				//取得该产品所属的所有分类列表
				bList=product.getProductCategories();
				//取得产品所属分类的个数
				bSize=bList.size();
				log.info("该产品上共有" +bSize+"个分类");
				for(int j=bSize;j>0;j--)
				{
					log.info("当前在该产品分类的第"+j+"个分类上进行操作");
					if(org.apache.commons.lang.ArrayUtils.contains(arrDictionaryLibs, (DictionaryLib)bList.get(j-1)))
					{
						log.info("当前该产品分类是欲删除分类中的一个");
						if(bSize>1)
						{
							log.info("由于该产品有多个分类，所以删除欲删除的分类并对该产品信息进行更新");
							//更新该产品信息
							bList.remove(j-1);
							product.setProductCategories(bList);
							this.getProductService().saveOrUpdate(product);
						}
						else
						{
							log.info("当前产品仅存在一个分类，所以对此产品进行删除操作，包括其附表、明细、主表，文件");
							//删除该产品主表，明细表，附件表信息，并删除附件
							
//							删除产品相关附件
							List list=product.getProductAttachments();
							if(list!=null)
							{
							for(int k=0;k<list.size();k++)
							{
								//删除服务器上文件
								if(log.isInfoEnabled())
								{
									log.info("删除服务器上文件");
								}
								FileOperate.delete(request,((Attachment)list.get(k)).getAttachmentUrl());
								//删除Attachment表中的相关记录
								if(log.isInfoEnabled())
								{
									log.info("删除Attachment表中的相关记录");
								}
								this.getAttachmentService().delete((Attachment)list.get(k));
//								this.getAttachmentService().delete(this.getAttachmentService().findById(((Attachment)list.get(i)).getPkAttachmentId()));
							}
							}
							if(log.isInfoEnabled())
							{
								log.info("删除产品表及明细表相关记录");
							}
							this.getProductService().delete(product);
							
						}
					}
				}
			}
			
			//删除该分类，并级联删除该分类下的所有子类
			if(log.isInfoEnabled())
			{
				log.info("删除该分类，并级联删除该分类下的所有子类");
			}
			this.getDictionaryLibService().delete(dictionaryLib);
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("message.struts.action.categorydetail.delete.success"));
		}
		else
		{
			if(log.isInfoEnabled())
			{
				log.info("非法参数");
			}
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.categorydetail.invalid"));
		}
		if(!infos.isEmpty())
		{
			this.saveErrors(request, infos);
		}
		return mapping.findForward(Constans.PAGE_SHOW_INFO);
	}
	private void doPush(Stack<Integer> myStack,DictionaryLib dictionaryLib) {
		if(dictionaryLib.getDictionaryLibs().size()>0)
		{
			Iterator it=dictionaryLib.getDictionaryLibs().iterator();
			while(it.hasNext())
			{
				myStack.push(((DictionaryLib)it.next()).getPkDictionaryLibId());
			}
		}
	}
	private ActionForward doShow(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		ActionMessages infos=new ActionMessages();
		ActionForward af=null;
		if(log.isInfoEnabled())
		{
			log.info("执行doShow方法");
		}
		int id=request.getParameter(Constans.PARAM_OF_ID)==null?0:Integer.parseInt(request.getParameter(Constans.PARAM_OF_ID));
		DictionaryLib dictionaryLib=this.getDictionaryLibService().findById(id);
		if(dictionaryLib!=null)
		{
			if(log.isInfoEnabled())
			{
				log.info("参数值正确");
			}
			af=mapping.findForward(Constans.PAGE_CATEGORY_DETAIL);
			request.setAttribute(Constans.ENTITY_OF_CATEGORY, dictionaryLib);

//			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.categorydetail.invalid"));
//			af=mapping.findForward(Constans.PAGE_SHOW_INFO);
		}
		else
		{
			if(log.isInfoEnabled())
			{
				log.info("非法参数");
			}
			infos.add(Constans.MESSAGE_OF_INFO,new ActionMessage("error.struts.action.categorydetail.invalid"));
			af=mapping.findForward(Constans.PAGE_SHOW_INFO);
		}
		if(!infos.isEmpty())
		{
			this.saveErrors(request, infos);
		}
		return af;
	}
	private ActionForward buildDictionaries(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		if(log.isInfoEnabled())
		{
			log.info("执行doShow方法");
		}
		//在字典库中某类的父类Id，若为0则表示，该类为顶类
		int parentId=request.getParameter("parentId")==null?0:Integer.parseInt(request.getParameter("parentId"));
		//某父隶属的字典
		int dictionaryId=request.getParameter("dictionaryId")==null?0:Integer.parseInt(request.getParameter("dictionaryId"));
		//设置输出信息的格式及字符集
        response.setContentType("text/xml; charset=UTF-8");
        response.setHeader("Cache-Control", "no-cache");	
        List list=this.getDictionaryLibService().findByParentIdAndDictionaryId(parentId, dictionaryId);
        //创建XML
        Element root=new Element("tree");
        Document doc=new Document(root);
        if(list!=null)
        {
        	for(int i=0;i<list.size();i++)
        	{
        		DictionaryLib temp=(DictionaryLib)list.get(i);
        		Element tree=new Element("tree");
        		tree.setAttribute(new Attribute("text",temp.getName()));
        		tree.setAttribute(new Attribute("target","mainFrame"));
        		tree.setAttribute(new Attribute("src","categoryDetail.do?act=buildDictionaries&parentId="+temp.getPkDictionaryLibId().toString()+"&dictionaryId="+String.valueOf(dictionaryId)));
        		tree.setAttribute(new Attribute("action","categoryDetail.do?act=show&id="+temp.getPkDictionaryLibId().toString()));
        		doc.getRootElement().addContent(tree);
        	}
        }
        XMLOutputter xout=new XMLOutputter();
        xout.output(doc,response.getWriter());
        response.getWriter().close();
		return null;
	}
}